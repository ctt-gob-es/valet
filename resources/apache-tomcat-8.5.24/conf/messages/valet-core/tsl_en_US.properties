# Mensajes asociados al m√≥dulo de TSL.
#logMTSL000 = No property was obtained correctly determining the Locale for TSL literals. Will take the default locale.
#logMTSL001 = Take the next locale for TSL literals: {0}
logMTSL002 = Error parsing the TSL attribute [{0}].
logMTSL003 = Error parsing the TSL element [{0}].
logMTSL004 = The TSL attribute [{0}] has not be finded, and it must be defined. 
logMTSL005 = The TSL element [{0}] has not be finded, and it must be defined.
logMTSL006 = Error parsing the TSL under the standar ETSI TS {0} {1}.
logMTSL007 = Error parsing the TSL attribute [{0}]. This not have a valid value.
logMTSL008 = Error parsing the TSL element [{0}]. This not have a valid value.
logMTSL009 = Error parsing the TSL location URI [{0}].
logMTSL010 = Error parsing a X509 Certificate in a Digital Identity.
logMTSL011 = Error parsing a X509 Subject Name Digital Identity: It can not be empty or null.
logMTSL012 = Error parsing a Key Value Digital Identity: It can not be null.
logMTSL013 = Error: Not is possible to assign a null value to the TSL attribute [{0}].
logMTSL014 = Error: Not is possible to assign a null value to the TSL element [{0}].
logMTSL015 = Error: Not is possible to add another {0} element with null value in the TSL.
logMTSL016 = Error parsing the TSL, the input stream is null.
logMTSL017 = Error: The attribute [{0}] can not be null.
logMTSL018 = Error: The attribute [{0}] has an incorrect value.
logMTSL019 = Error: The element [{0}] can not be null.
logMTSL020 = Error: The element [{0}] has an incorrect value.
logMTSL021 = Error: Can not create a TSL Object representation with specification and/or version null.
logMTSL022 = Error: The extension [{0}] can not be critical.
logMTSL023 = Error: The extension [{0}] can not be associated to a service of type [{1}].
logMTSL024 = Error: The extension [{0}] must be has a valid value in its element [{1}].
logMTSL025 = Error: The extension [{0}] can not have the value [{1}].
logMTSL026 = Error: The extension [{0}] can not have a valid number of elements.
logMTSL027 = Scheme Extension
logMTSL028 = TSP Information Extension
logMTSL029 = Service Information Extension
logMTSL030 = Unknown Extension
logMTSL031 = Error: The AdditionalServiceInformation Extension only can be [{0}], and it is [{1}].
logMTSL032 = Error: The ExpiredCertsRevocationInfo Extension only can be [{0}], and it is [{1}].
logMTSL033 = Error: The AdditionalServiceInformation Extension has not a valid URI: [{0}].
#logMTSL034 = Error: The AdditionalServiceInformation Extension only can be used in european member TSL, and its type is [{0}].
logMTSL035 = Error: The Qualifications Extension only can be [{0}], and it is [{1}].
logMTSL036 = Error: The Qualification-Qualifier Extension URI is not valid: [{0}].
logMTSL037 = Error: The extension [{0}] must define a value for the attribute [{1}].
logMTSL038 = Error: The extension [{0}] of type [{1}] is unknown and critical.
logMTSL039 = Error: The Digital Identity element with a X509Certificate element does not contains the associated certificate.
logMTSL040 = Error: The Digital Identity element with a X509SubjectName element contains an empty string.
logMTSL041 = Error: The Digital Identity element with a KeyValue element does not contains the associated KeyValue.
logMTSL042 = Error: The Digital Identity element with a X509SKI element does not contains the associated X509SKI.
logMTSL043 = Error: The Digital Identity element with a Other element contains an empty string.
logMTSL044 = Error: The Digital Identity element has a type not recognized.
logMTSL045 = Error reading the input stream with the TSL data.
#logMTSL046 = Error parsing the TSL how a XML signature.
#logMTSL047 = Error parsing the TSL how a XML signature: The element [{0}] has not been finded.
#logMTSL048 = Error parsing the TSL how a XML signature: Only must be one signature.
#logMTSL049 = Error parsing the TSL how a XML signature: Not is well formed.
#logMTSL050 = Error parsing the TSL how a XML signature: Error accesing to the KeyInfo data.
#logMTSL051 = Error parsing the TSL how a XML signature: Error checking the integrity of the signature.
#logMTSL052 = Error parsing the TSL how a XML signature: Can not find the signer public key.
#logMTSL053 = Error parsing the TSL how a XML signature: The signature can not be verified.
#logMTSL054 = Error parsing the TSL how a XML signature in accordance with ETSI TS {0} {1}: {2}
logMTSL055 = Element [{0}] not finded in the TSL signature.
logMTSL056 = Reference ponting to the XML data identifier [{0}] not finded.
logMTSL057 = The element Transforms must be defined inside the SignedInfo-Reference pointing to [{0}].
logMTSL058 = The number of Transform elements inside SignedInfo-Reference-Transforms pointing to [{0}] must be 2.
logMTSL059 = The element Transform inside SignedInfo-Reference-Transforms pointing to [{0}] at position [{1}] must specify the URI [{2}].
logMTSL060 = The element CanonicalizationMethod has not be finded inside the SignedInfo.
logMTSL061 = The element CanonicalizationMethod defined in the SignedInfo must define the URI [{0}].
logMTSL062 = Only must be one X509Data element inside the KeyInfo.
logMTSL063 = Only must be one KeyValue element inside the KeyInfo.
logMTSL064 = Only must be one SKIData element inside the KeyInfo.
logMTSL065 = The KeyInfo is not defining any element of type: X509Data, KeyValue or SKIData.
logMTSL066 = Error parsing the TSL how a XAdES signature to check the Qualifying properties.
logMTSL067 = The KeyInfo element must be defined.
logMTSL068 = The element QualifyingProperties must be defined in a XAdES signature.
logMTSL069 = The element QualifyingProperties must define the attribute target with the same value that the Signature ID.
logMTSL070 = The TSL signer certificate was not recovered.
logMTSL071 = Must exists at least one Cert element inside the SigningCertificate element.
logMTSL072 = Error validating the SigningCertificate from the Qualifying Properties with the KeyInfo.
logMTSL073 = There was an error parsing the X509v3 Certificate to check if exists the extended key usage extension for signing TSL.
logMTSL074 = The X509v3 Certificate to check if exists the extended key usage extension for signing TSL is null.
logMTSL075 = Does not exist extended key usage extensions for the X509v3 certificate.
logMTSL076 = The extended key usage extensions of the X509v3 certificate does not contains the extended key usage extension for signing TSL.
#logMTSL077 = Error parsing the TSL under the standar ETSI TS {0} {1}: Element {2}
logMTSL078 = Error verifying the TSL signature.
#logMTSL079 = The extension [{0}] must not be defined in a TSL that follows the specification ETSI TS {1} {2}.
#logMTSL080 = The Other Criteria [{0}] must not be defined in a TSL that follows the specification ETSI TS {1} {2}.
logMTSL081 = The Other Criteria Extended Key Usage must define at least one OID.
logMTSL082 = Error getting the extended key usage of the certificate to check these.
logMTSL083 = The Other Criteria Cert Subject DN Attributes must define at least one OID.
logMTSL084 = Error parsing the certificate to validate for check its subject.
logMTSL085 = Error: For the specification ETSI TS {0} {1} must be defined the element [{2}] at least in english. 
logMTSL086 = Error: For the specification ETSI TS {0} {1}, the element [{2}] has not a value well formed.
logMTSL087 = Any of the URIs [{0}] has not be finded in the TSL Pointers, and it must be defined for an european member TSL.
logMTSL088 = Error: The scheme extensions are not allowed if the TSL is from an european member.
logMTSL089 = Error: For the AdditionalServiceInformationExtension, if the URI is [{0}], then the associated service type must be [{1}].
logMTSL090 = Error: Critical extensions for a TSP belonging to an european member are not allowed.
logMTSL091 = Error: For a service type non PKI, not must be defined a PKI identity.
logMTSL092 = Error: The country code [{0}] of the TSL signing certificate does not match with the TSL Scheme Territory [{1}].
logMTSL093 = Error: The organization [{0}] of the TSL signing certificate does not match with any TSL Scheme Operator Name.
logMTSL094 = Error: Error parsing the TSL signing certificate.
#logMTSL095 = Error: The TSL signing certificate key usage is not set exclusively to digitalSignature or nonRepudiation.
logMTSL095b = Error: The TSL signing certificate key usage is not set exclusively to digitalSignature and/or nonRepudiation.
logMTSL096 = Error: The TSL signing certificate SubjectKeyIdentifier extension is not defined.
logMTSL097 = Error: The TSL signing certificate SubjectKeyIdentifier extension is not set how is stablished at the first two methods defined in RFC 5280 (4.2.1.2).
logMTSL098 = Error: There was an error getting the SubjectKeyIdentifier extension from the TSL signing certificate.
logMTSL099 = Error: There was an error calculating the SHA-1 hash for the SubjectKeyIdentifier extension from the TSL signing certificate.
logMTSL100 = Error: There was an error getting the Basic Constraints extension from the TSL singning certificate.
logMTSL101 = Error: The BasicConstraint extension from the TSL signing certificate indicates CA=true.
logMTSL102 = It is not possible to search the TSL associated to the certificate because not is specified the issuer country/region on it.
logMTSL103 = Error getting the TSL of [{0}] country/region with validation date [{1}] from the cache.
#logMTSL104 = The TSL analysis of the certificate is going to be igonred because an error: {0}
#logMTSL105 = How the certificate type is not detected by the platform, then is going to search validate TSL.
#logMTSL106 = Some TSL from the same country/region of the certificate issuer has been finded.
logMTSL107 = It is not possible to validate a null certificate with TSL.
logMTSL108 = The TSL Status Determination Approach is delinquent or equivalent.
logMTSL109 = Error parsing the input certificate to get it Certificate Policies Extension. It is considered that the certificate does not pass the criteria.
logMTSL110 = Error checking if the certificate to validate is signed by some certificate added in a identity of TSP. The process going on.
logMTSL111 = Error checking if the certificate issuer is the same that the subject defined in the TSP Service. The process going on.
logMTSL112 = Error checking if the certificate to validate is verified by the public key obtained from the TSP Service. The process going on. 
#logMTSL113 = Error parsing the certificate to validate with IAIK. The process going on.
logMTSL114 = Error getting the AuthorityKeyIdentifier extension from the certificate to validate. The process is going on.
logMTSL115 = A digital identity has not been finded to verify the CRL issuer.
#logMTSL116 = There was an error getting the associated information about a validation method with the URI [{0}], accordingly, is not going to use authentication to download the CRL.
logMTSL117 = There was an error downloading the CRL through a LDAP with the full path [{0}]. The platform will search and try another way. 
logMTSL118 = There was an error downloading the CRL through a HTTP with the full path [{0}]. The platform will search and try another way.
logMTSL119 = There was an error downloading the CRL through a FTP with the full path [{0}]. The platform will search and try another way.
logMTSL120 = The scheme of the URI [{0}] is not valid to get a CRL. It must be HTTP, LDAP or FTP.
#logMTSL121 = The URI to obtain the CRL is not valid [{0}].
logMTSL122 = The URI to obtain the CRL can not be null.
#logMTSL123 = The obtained CRL is not valid yet. Its validity period starts at [{0}].
logMTSL124 = The obtained CRL has been expired. Its validity period ended at [{0}].
logMTSL125 = There was an error checking if the certificate to validate is revoked over the CRL.
logMTSL126 = There was an error building the CertificateID to validate the certificate through OCSP.
logMTSL127 = There was an error building a new Nonce value to assign to the OCSP request.
logMTSL128 = There was an error building and sending the OCSP Request to [{0}].
#logMTSL129 = There was an error getting the certificate chain of the ocsp signer request.
#logMTSL130 = There was an error getting the signature format for the ocsp request signing.
#logMTSL131 = Unable to perform OCSP signing request because could not collect all necessary data.
#logMTSL132 = There was an error signing the OCSP request. We will continue without signing.
#logMTSL133 = There was an error loading the necessary data for singning the OCSP request, so the process will continue without signing the request.
logMTSL134 = It has not been able to check the revocation status of a certificate using OCSP.
logMTSL135 = The status of the OCSP response is not valid [{0}], so the process will try another ways to validate the revocation status of the certificate.
logMTSL136 = The OCSP response is not a BasicOCSPResponse type, and no other is supported, so the process will try another ways to validate the revocation status of the certificate.
logMTSL137 = The OCSP response is not signed by a valid certificate, so the process will try another ways to validate the revocation status of the certificate.
logMTSL138 = Can not check if the OCSP response is signed by the issuer of the certificate to validate because do not known the public key.
#logMTSL139 = There was an error verifying the OCSP response, so the process will try another ways to validate the revocation status of the certificate.
#logMTSL140 = There was an error verifying if the signer certificate of the OCSP response has the extension to sign OCSP responses, so the process will try another ways to validate the revocation status of the certificate.
logMTSL141 = The OCSP response indicates that the certificate to validate is unknown.
logMTSL142 = There was an error parsing the OCSP response to extract the status of the certificate.
#logMTSL143 = There was an error parsing the certificate to validate with the IAIK library. The validation process will be aborted.
logMTSL144 = To execute a revocation validation of a certificate through TSL, it is necessary to define a validation date.
logMTSL145 = Error parsing the input certificate to check if is accomplished with the additional Criteria set by the TSP-Service. It is considered that the certificate does not pass the criteria.
logMTSL146 = There was an error checking if the TSL signer certificate is in the TSL TrustStore.
logMTSL147 = The TSL signer certificate with issuer [{0}] and serial number [{1}] was not finded in TSL TrstStore.
#logMTSL148 = There was an error getting from the clustered cache a TSL with the location [{0}] and date range [{1}].
logMTSL149 = There was an error validating the certificate with the TSL of the territory [{0}] and sequence number [{1}].
logMTSL150 = There was an error getting the mapping for the TSL country region [{0}]. Is only going to be used the common mappings.
logMTSL151 = There was an error generating a wrapper of the certificate to validate for extract the associated mappings.
logMTSL152 = It was not possible to extract the mappings of the certificate of the associated TSL region. The process will continue without this information.
logMTSL153 = There was a critical error reloading the TSL cache, and it is a requisite for the correct operation of the platform. Please, review the logs.
logMTSL154 = The load/reload of the TSL data in the cache has been started...
logMTSL155 = The load/reload of the TSL data in the cache has been finalized.
#logMTSL156 = There was an error when tries to check if hte country/region [{0}] (for TSL) is registered in the system.
#logMTSL157 = The alias assigned for the TSL already exists in data base.
logMTSL158 = There was an error while is trying to get all the differents specifications and versions of TSL allowed for the platform.
logMTSL159 = There was an error checking if a country/region of TSL is already registered in the platform.
logMTSL160 = There was an error while is trying to get all the countries/regions codes of TSL registered in the platform.
logMTSL161 = There was an error getting a TSL country/region data with code [{0}].
logMTSL162 = There was an error updating the name of the country/region with ID [{0}]
logMTSL163 = There was an error while is removing the country/region with code [{0}].
logMTSL164 = There was an error getting all the mapping information from the country/region with code [{0}].
logMTSL165 = There was an error adding a new mapping to the country/region [{0}].
logMTSL166 = There was an error updating a TSL mapping data with the ID [{0}].
logMTSL167 = There was an error removing the TSL mapping with ID [{0}] from the country/region with code [{1}].
logMTSL168 = There was an error getting the TSL data information associated to the country/region with code [{0}].
#logMTSL169 = There was an error checking if the alias [{0}] is already used by some TSL.
logMTSL170 = There was an error building and checking the TSL to add in the data base and the cache.
logMTSL171 = There was an error adding a new TSL in the data base and clustered cache.
#logMTSL172 = There was an error updating the alias of the TSL with ID [{0}] to [{1}].
logMTSL173 = There was an error removing a TSL with ID [{0}] from the country/region with code [{1}]. 
logMTSL174 = There was an error getting the information data of the TSL with ID [{0}] from the cache.
logMTSL175 = There was an error getting the XML of the TSL with ID [{0}].
logMTSL176 = There was an error updating the legible document od the TSL with ID [{0}].
logMTSL177 = It is necessary that must be used at least one revocation value to analyze this with the TSL.
logMTSL178 = There was an error analizying the OCSP responses with TSL from the revocation values.
logMTSL179 = There is not any revocation values compatibles (among those available) with the input certificate and/or the input validation date. The process go on to detect the certificate with the TSL for extract info about it.
logMTSL180 = There was an error parsing the input certificate with the BouncyCastle library.
#logMTSL181 = There was an error getting the revocation values used and recognized by the TSL for check the status revocation of the certifcate.
logMTSL182 = There was an error getting the Subject Name of the detected issuer certificate that verifies the certificate to validate.
logMTSL183 = There was an error getting the Subject Key Identifier of the detected issuer certificate that verifies the certificate to validate.
#logMTSL184 = There was an error getting the CRL distribution points from the certificate to validate.
logMTSL185 = CRL Distribution Points has not been finded in the certificate to validate.
logMTSL186 = There was an error getting the Authority Information Access from the certificate to validate.
#logMTSL187 = Although is not allowed in the specification [{0}], is given how valid for the element [{1}] the value [{2}].
logMTSL188 = For the element [{0}] is going to be changed the value [{1}] to [{2}], because it is allowed by the specification [{3}].
logMTSL189 = There was an error while is checking if the signer certificate of the TSL exists in the TSL truststore.
logMTSL190 = There was an error updating the distribution point of the TSL with ID [{0}] to [{1}].
logMTSL191 = There was an error updating the new TSL available field value with ID [{0}] to [{1}].
logMTSL192 = There was an error updating the last new TSL available find field value with ID [{0}] to [{1}].
#logMTSL193 = Is not properly defined the number of identities associated to the service [{0}].
#logMTSL194 = Is not possible to create a new mapping with the identificator [{0}] because it is defined in the static mappings for TSL.
logMTSL195 = There was an error trying to check if the certificate to validate with TSL has the id-kp-timestamping key purpose.
logMTSL196 = Error checking if the certificate to validate is equal to some certificate added in a identity of TSP. The process going on.
logMTSL197 = Error parsing the input certificate to get from it some information and extensions. It is considered that the certificate does not obey the conditions to be detected.
#logMTSL198 = Error: For the specification ETSI TS {0} {1}, one of the element [{2}] in the TSP [{3}] must be appear with the official registration identifier.
logMTSL199 = The certificate is going to be checked and validated with the TSLv{0} {1}-{2}.
logMTSL200 = The certificate to check has the key purpose id_kp_timestamping, so it is considered how a TSA certificate.
logMTSL201 = The certificate to check has NOT the key purpose id_kp_timestamping, so it is NOT considered how a TSA certificate.
logMTSL202 = The TSL to use represents a list of lists (it references another TSL). In this case, the certificate to check is considered not detected.
logMTSL203 = It was not possible to identify any TSP-Service that recognizes the certificate.
logMTSL204 = The certificate has been detected in the TSL by the TSP [{0}] and the service [{1}]{2}, but it was not possible to verify its revocation status.
logMTSL205 = The certificate has been detected in the TSL by the TSP [{0}] and the service [{1}]{2}. It has been checked the revocation status by the TSP-Service [{3}]{4}: [{5}].
logMTSL206 = The certificate has been detected in the TSL by the TSP [{0}] and the service [{1}]{2}. Furthermore the revocation status has been determined: [{3}].
logMTSL207 = Valid.
logMTSL208 = Revoked.
logMTSL209 = Certificate chain not valid.
logMTSL210 = The TSP-Service is revoked.
logMTSL211 = The TSP-Service is not valid (certificate chain not valid).
logMTSL212 = It has been finded a TSP-Service of type TSA which digital identities identify the certificate issuer. 
logMTSL213 = It has been finded a TSP-Service of type CA which digital identities identify the certificate issuer.
logMTSL214 = The Qualifications extension is not defined in the selected TSP-Service, and the certificate does not accomplish the minimum requirements to avoid that. However, it has been decided to consider the certificate detected by the TSP-Service.
logMTSL215 = It has been determined the certificate revocation status by the TSP-Service status.
logMTSL216 = It is going to be checked the certificate revocation status by the distribution points (and AIA extension) defined in the certificate with validation date [{0}].
logMTSL217 = It was not possible to determine the certificate revocation status with the information of the DP and AIA. It is going to be searched some TSP-Service that gives information of how to check the revocation status of the certificate.
#logMTSL218 = It is going to validate the certificate with the TSLv{0} {1}-{2} using the revocation values available.
logMTSL219 = The TSL to use represents a list of lists (it references another TSL). In this case, no revocation values available is accepted.
logMTSL220 = A TSP-Service that detects at least one of the available revocation values has been finded. This revocation values will be used to check the revocation status of the certificate.
logMTSL221 = A TSPInformationAddress has a malformed URI [{0}]. The blank spaces has been eliminated.
logMTSL222 = The difference between the issue date and the next update must be a maximum of 6 months. This error is ignored.
logMTSL223 = The OCSP response is not valid. The response signer has not the correct extensions or it is not trusted.
logMTSL224 = There was an error getting the property [{0}]. The value [{1}] is taken as default.
logMTSL225 = The validation date [{0}] is before than the date configured from which is allowed the use of TSL [{1}], so these are not going to be used.
logMTSL226 = It was not possible to parse the value [{0}] in the property [{1}], so it will be ignored.
#logMTSL227 = It was an error reading the property [{0}], so it will be considered without values assigned.
logMTSL228 = The certificate has been detected in the TSL by the TSP [{0}] and the service [{1}].
logMTSL229 = The History Service [{0}] has type [{1}] and status [{2}], and these are not compatible. Actually the platform does not use the historic information, so the check is relaxed and the process goes on.
logMTSL230 = The TSP [{0}] do not include in its element [{1}] a value that represents its official identifier. This check is relaxed and the process goes on.
logMTSL231 = There is a TSP Service with type [{0}]. This URI is bad defined in the specification (misprint), so is automatically redefined to [{1}], which is correct.
logMTSL232 = There is a TSP Service [{0}] with a extension AdditionalServiceInformation with the URI [{1}], which is not recognized, but how this extension is not critial, this is ignored and the process goes on.
#logMTSL233 = The TSL representation whose digital identities are going to be compared with the CA configured in the platform, must not be null.
logMTSL234 = Error: For a service type non PKI, it digital identity must be a URI.
logMTSL235 = Error: For a service history instance definition, must not be used digital identities of X509Certificate type.
logMTSL236 = Error: For the definition of a service history instance, must be included at least one digital identity of X509SKI type.
logMTSL237 = Error: For the TSP Service [{0}] of type CA/QC, it shall include an AdditionalServiceInformation extension.
logMTSL238 = It was not possible to find a TSL that can be used for the country/region [{0}] and date [{1}].
logMTSL239 = A TSL has been finded for the country/region [{0}] and date [{1}]. Its sequence number is [{2}].
logMTSL240 = It was not possible to find a TSL that can be used for the TSLLocation [{0}] and date [{1}].
logMTSL241 = A TSL has been finded for the TSLLocation [{0}] and date [{1}]. Its sequence number is [{2}].
#logMTSL242 = How the process validation have used a TSL, then it was not possible to collect the revocation values for the certification chain.
logMTSL243 = The certificate to analyze can not be null.
logMTSL244 = There was an error trying to extract the QcStatement extension for analyze.
logMTSL245 = There was an error trying to extract the CertificatePolicies extension for analyze.
#logMTSL246 = There was an error trying to get the QcStatements - EuType extension for analyze.
logMTSL247 = The certificate to detect does not meet the conditions of the AdditionalServiceInformation extension. Under the recommendation of Project Direction, this requirement will be ignored until all the TSP define its certificate correctly. At the momento, if the certificate is qualified or not, is unknown.
#logMTSL248 = There was an error reloading the TSL in the cache.
logMTSL250 = There was an error checking the certificate over the CriteriaList defined in the Qualifications Extension, and this is critical, so the certificate is rejected by the process of detection in the TSL.
logMTSL251 = There was an error checking the certificate over the CriteriaList defined in the Qualifications Extension, but this is no critical, so the error is ignored and go on.
logMTSL252 = It is going to obtain the CRL from the URI: [{0}].
logMTSL253 = The CRL from the URI [{0}] has been obtained and validated.
logMTSL254 = It was not possible to validate the CRL obtained from the URI: [{0}].
logMTSL255 = It is going to get the OCSP response from the OCSP server in URI: [{0}].
logMTSL256 = The OCSP response (from the OCSP Server in [{0}]) has been obtained and validated.
logMTSL257 = There was an error trying to extract the signing certificate of the TSL.
logMTSL258 = An error occurred while trying to get the name of the country / region with ID [{0}]
logMTSL259 = An error occurred while trying to update the TSL: [{0}]
logMTSL260 = , using the historic information with name [{0}] and starting date [{1}]
logMTSL261 = There was an error checking the TSP-Service [{0}], and inside this, in the Service-History-Instance [{1}], so this historic service it is going to be marked as NOT usable. The error is the following: {2}
logMTSL262 = There was an error checking the TSP-Service [{0}], so this service it is going to be marked as NOT usable (regardless of its historic information). The error is the following: {1}
logMTSL263 = It has been finded a TSP-Service of type CA which digital identities identify the certificate.
logMTSL264 = It has been finded the issuer of the certificate (intermediate CA) inside of the TSP that detect the certificate.
logMTSL265 = It has NOT been finded the issuer of the certificate (intermediate CA) inside of the TSP that detect the certificate.
logMTSL266 = An error occurred while verifying the TSL. Error: [{0}]. The reloading of the TSLs cache continues.
logMTSL267 = An error occurred while obtaining the list of the versions of the enabled TSLs. Error: [{0}]
logMTSL268 = An error occurred while trying the TSL mappings of [{0}].
logMTSL269 = The TSL for the certificate could not be found.
logMTSL270 = The OCSP response has been obtained according to the certificate to be validated.
logMTSL271 = The list of TSPs is obtained and they are analyzed one by one.
logMTSL272 = The list of TSPService is obtained and it is traversed to detect the certificate.
logMTSL273 = It is about detecting the certificate in the TSPServices and date of issuance of the certificate [{0}].
logMTSL274 = It is a timestamp certificate, it is checked if the service is of the TSA type (qualified or not)
logMTSL275 = The TSP [{0}] identifies the certificate, the classification is set to time stamp.
logMTSL276 = The incoming TSP [{0}] is for a qualified TSA.
logMTSL277 = The incoming TSP [{0}] is for a NON-qualified TSA.
logMTSL278 = The certificate has been detected in a historical service.
logMTSL279 = The TSL for the certificate to validate has been obtained.
logMTSL280 = We proceed to analyze the revocation values ‚Äã‚Äãin the TSL.
logMTSL281 = It is checked if the same issuer that identifies the certificate is the signer of the OCSP response.
logMTSL282 = It is checked if the same issuer that identifies the certificate is the signer of any of the CRLs.
logMTSL283 = The TSP [{0}] identifies the certificate.
logMTSL284 = By belonging to TSL to a European member and being a certificate from a CA, it is considered detected and qualified.
logMTSL285 = Being a final type certificate, and the values ‚Äã‚Äãof the AdditionalServiceinformacion extensions match those of the certificate, it is considered qualified.
logMTSL286 = Being a CA / PKC the certificate is NOT qualified.
logMTSL287 = Being the status of the service WITHDRAWN, the certificate is NOT qualified.
logMTSL288 = The certificate has been detected by TSL and the service status is valid.
logMTSL289 = The certificate has been detected by TSL and the status of the service is unknown.
logMTSL290 = The certificate has been detected by TSL and the service status is not valid.
logMTSL291 = The certificate has been detected by TSL and the service status is revoked.
logMTSL292 = An alarm is raised when the CRL cannot be downloaded.
logMTSL293 = CRL issuer [{0}] not trusted.
logMTSL294 = An error occurred while launching ALARM03: Error getting / using a CRL. Cause: [{0}].
logMTSL295 = As the certificate issuance date [{0}] is later than the date indicated in the TSP [{1}] the current status of the TSP is used.
logMTSL296 = As the certificate issuance date [{0}] is prior to the date indicated in the TSP [{1}], it is searched among its history.
logMTSL297 = Since tspServiceType is TSA / QTST, it is QUALIFIED
logMTSL298 = Like tspServiceType [{0}], the certificate is UNQUALIFIED.
logMTSL299 = This is a CA type service.
logMTSL300 = It is a certificate from a CA, it is considered detected and QUALIFIED.
logMTSL301 = The values ‚Äã‚Äãof the AdditionalServiceInformation extensions are verified to match those of the certificate. This depends on the specification.
logMTSL302 = The extension has been found, and the certificate matches your definition, it is considered QUALIFIED.
logMTSL303 = It is checked if the incoming certificate is detected by the criteria of the Qualifications Extension of the incoming TSP Service.
logMTSL304 = The list of extensions of the service is traversed, looking for it to be of type Qualifications.
logMTSL305 = The list of Qualifications obtained is traversed. It is analyzed if the criteria are met to detect the certificate.
logMTSL306 = A criteria has identified the certificate, it is analyzed to determine mappings of the certificate.
logMTSL307 = Since the URI of qualifier is [{0}], qscd is [{1}].
logMTSL308 = As it is a cA / PKC, the certificate is UNQUALIFIED.
logMTSL309 = Once the certificate is detected, its status is established depending on the TSPService.
logMTSL310 = No Qualifications Extensions found ...
logMTSL311 = Contains extension [{0}].
logMTSL312 = CertClassification is WSA already has the extension ForWebSiteAuthentication and it fulfills that the certificate has the entry 'id-etsi-qct-web: 0.4.0.1862.1.6.3' or the entry 'qcp-web: 0.4.0.194112.1.4 '
logMTSL313 = The following information is extracted from the certificate to validate ...
logMTSL314 = QcStatementOids [{0}]
logMTSL315 = PolicyInformationOids [{0}]
logMTSL316 = QcStatementExtEuTpeOids [{0}]
logMTSL317 = CertClassification is ESEA, has the ForeSeals extension and fulfills that the certificate contains the entry 'id-etsi-qct-eseal: 0.4.0.1862.1.6.2' or else, the certificate contains one of the following OIDs: 'qsc- legal: 0.4.0.194112.1.1 'or' qcp-legal-qscd: 0.4.0.194112.1.3 '
logMTSL318 = CertClassification is ESIG, it has the ForeSignatures extension and fulfills that the certificate contains some QscStatement extension or it has any of the following entries: 'qcp-public-with-sscd: 0.4.0.1456.1.1', 'qcp-public: 0.4.0.1456.1.2 ',' qcp-natural: 0.4.0.194112.1.0 'or' qcp-natural-qscd: 0.4.0.194112.1.2 '
logMTSL319 = Service status is [{0}]
logMTSL320 = The information of the mappings of the obtained result is extracted.
logMTSL321 = First it is established if the certificate is qualified or not ...
logMTSL322 = If you have the QcStatement extension and at least one is qualified, or failing that there is a Certificate Policies, Policy Information extension that determines that it is qualified ...
logMTSL323 = The certificate is qualified.
logMTSL324 = The certificate is not qualified.
logMTSL325 = An error occurred when checking if the certificate is qualified or not.
logMTSL326 = As qscd UNKNOWN is obtained from the TSL, the value qscd is obtained from the certificate.
logMTSL327 = As the TSL obtains the MAPPING_QSCD_ASINCERT value, the qscd value is obtained from the certificate.
logMTSL328 = As classification UNKNOWN is obtained from the TSL, this result is obtained from the certificate.
logMTSL329 = As UNKNOWN map type is obtained from the TSL, it is obtained if it is qualified or not from the certificate.
logMTSL330 = Certificate obtained from TSL is not qualified.
logMTSL331 = A qualified certificate is obtained from the TSL.
logMTSL332 = From the TSL we get NATURAL PERSON certClassification
logMTSL333 = From the TSL you get the LEGAL PERSON certClassification
logMTSL334 = ESEAL certClassification is obtained from the TSL
logMTSL335 = ESIG certClassification is obtained from the TSL
logMTSL336 = From the TSL you get WSA certClassification
logMTSL337 = From the TSL you get TSA certClassification
logMTSL338 = From the TSL you get qscd NO
logMTSL339 = From the TSL we get qscd YES
logMTSL340 = As the value qscd MAPPING_QSCD_ASINCERT is obtained from the TSL, this result is obtained from the certificate.
logMTSL341 = An error occurred while obtaining the qscd value from the certificate, the value of qscd is set UNKNOWN.
logMTSL342 = From the TSL we get qscd YES_MANAGED_ON_BEHALF
logMTSL343 = Start of TSL parsing.
logMTSL344 = TSL [{0}] is being parsed
logMTSL345 = End of TSL parsing [{0}]
logMTSL346 = End of TSL parsing. Undefined Country / Region
logMTSL347 = It is verified that the values established in the parse are correct.
logMTSL348 = An error occurred while validating the CRL. [{0}]
logMTSL349 = The process to extract information for the TSL Mapping Module tree is started.
logMTSL350 = End of the process to extract information for the TSL Mapping Module tree.
logMTSL351 = Error trying to calculate SHA-256 Hash of TSL DigitalId certificate [{0}], TSPName [{1}] and TSPService Name [{2}].
logMTSL352 = Error encoding certificate for TSL DigitalId [{0}], TSPName [{1}] and TSPService Name [{2}].
logMTSL353 = The map is updated with the information from the tree of the TSL Mapping Module.
logMTSL354 = Error when updating the map with the information from the tree of the TSL Mapping Module. Error:[{0}].
logMTSL355=Could not get the mappings configured on the TSPService [{0}]. Processing will continue without such information.
logMTSL356= An error occurred while fetching the list of TSPServices that identify the service.
logMTSL357 = No TSPService that identifies the certificate has been obtained.
logMTSL358 = Error when trying to verify that the legal or natural person that issues the certificate is among the list of TSPName and TSPTradeName of the TSPServices that identify the certificate. Failed: [{0}].
logMTSL359 = There is an inconsistency between the certificate and the TSL so the certificate is UNDETERMINED.
logMTSL360 = Error while parsing the TSL validation date configured in the staticValetConfig.properties file.
logMTSL361= We proceed to obtain all the services that are QC and among their digital identities is the certificate or one of its certification chain.
logMTSL362 = Error getting the services that are associated with the certificate to validate. Error:[{0}]
logMTSL363 = Check if TSPService [{0}] contains AdditionalServiceInformation extensions.
logMTSL364 = "Service type identifier" for electronic signatures (ForeSignatures).
logMTSL365 = "Service type identifier" for time stamp (ForeSeals).
logMTSL366 = "Service type identifier" for Web Site authentication (ForWebSiteAuthentication).
logMTSL367 = [{0}] TSPService associated with the certificate to be validated have been obtained.
logMTSL368 = No TSPService found matching the certificate to be validated.
logMTSL369 = It has been verified that the list of historical services are not ordered from the TSPService [{0}], according to ETSI TS 119 615 v.1.1.1 PRO-4.3.4-3 b)3) the process.
logMTSL370 = An error occurred while trying to download the certificate via HTTP located at path [{0}].
logMTSL371 = TSPService that identifies the certificate. TSPName: {0}
logMTSL372 = The list of SIResults is updated.
logMTSL373 = Failed to retrieve issuer certificate from [{0}]. 
logMTSL374 = The issuer certificate was not found either from the 'Issuer Alternative Name' attribute or within the CA Trust Store.
logMTSL375 = TSPServices associated with the certificate issuer of the certificate to be validated have been obtained.
logMTSL376 = Error trying to get issuer certificate from CA Trust Store. Failed :[{0}].
logMTSL377 = Error trying to get the 'Issuer Alternative Name' attribute of the certificate. Failed: [{0}].
logMTSL378 = An issuer certificate has been registered in the CA Trust Store.
logMTSL379= Get certClassification 'UNKNOWN' from the TSL.
logMTSL380= Get certQualified 'UNKNOWN' from the TSL.
logMTSL381 = Field 'ETSI_Result' has the value: [{0}].
logMTSL382= Get qscd 'UNKNOWN' from the TSL.
logMTSL383 = The issuing certificateis already registered in the CA Trust Store.
logMTSL384 = Failed to register issuer certificate with alias [{0}] in the Trusted Store CA. Error:[{1}]
logMTSL385= PROC3 is started. to obtain the TSPServices that identify the certificate.
logMTSL386= Finished PROC3. Results: SIStatus = [{0}] and [{1}] TSPServices have been found that identify the certificate.
logMTSL387 = No TSPService has been found that matches or validates the certificate, proceed to obtain the issuer certificate.
logMTSL388= The issuer certificate has been obtained correctly, it is checked if it is a root certificate.
logMTSL389 = Issuing certificate is root, PROC 3 terminates, TSL is not looked up again.
logMTSL390 = It is checked if the certificate has the 'organizationName' attribute present in the certificate and if it is identified with the list of TSPNames/TSPTradeNames of those TSPServices that identify the certificate.
logMTSL391 = According to 'PROC 3.Obtaining listed services matching a certificate' NO TSPService has been found that meets the requirements to identify the certificate. However, it is considered recognized because the certificate is recognized in the TSL by a TSPService Timestamp (QTST).
logMTSL392= The issuer certificate is not root, so we look for it to be found or validated by any TSPService of the TSL.
logMTSL393 = The issuer certificate is searched in the CA Trust Store.
logMTSL394 = The issuer certificate is obtained from the URL [{0}] obtained from the 'Issuer Alternative Name' attribute.
logMTSL395 = Since the certificate is timestamped, it checks if the certificate has been detected in a timestamp TSLService (QTST)
logMTSL396 = Cannot get the TSL, since the validation date [{1}] is after the TSL expiration date of [{0}].
logMTSL397 = The certificate discovery process is called again passing the certificate issue date [{0}].
logMTSL398 = A service with a date less than or equal to the validation date [{0}] has not been found among the logs.
logMTSL399 = Failed to check the certificate revocation status using OCSP because the issuer certificate was not obtained.
logMTSL400 = Not detected in a TSLService timestamp (QTST).
errorQcSubStatus1 = According to 'Table 4: QC status check' of ETSI TS 119 615 v.1.1.1., the values CHECK1 [{0}], CHECK2[{1}] and CHECK3[{2}] are not compatible and the process stops.
errorQcSubStatus2 = According to 'PRO-4.4.4-36 a)' of ETSI TS 119 615 v.1.1.1.', if the results obtained in PRO 4.4 for a given date and the certificate issue date are different, the process stops.
warningQcSubStatus = According to 'Table 4: QC status check' of ETSI TS 119 615 v.1.1.1., the resulting value when comparing the values CHECK1 [{0}], CHECK2[{1}] and CHECK3[{2 }] is 'warning', but processing continues.